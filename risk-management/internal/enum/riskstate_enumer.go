// Code generated by "enumer -json -type=RiskState"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _RiskStateName = "OpenClosedAcceptedInvestigating"

var _RiskStateIndex = [...]uint8{0, 4, 10, 18, 31}

const _RiskStateLowerName = "openclosedacceptedinvestigating"

func (i RiskState) String() string {
	if i < 0 || i >= RiskState(len(_RiskStateIndex)-1) {
		return fmt.Sprintf("RiskState(%d)", i)
	}
	return _RiskStateName[_RiskStateIndex[i]:_RiskStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RiskStateNoOp() {
	var x [1]struct{}
	_ = x[Open-(0)]
	_ = x[Closed-(1)]
	_ = x[Accepted-(2)]
	_ = x[Investigating-(3)]
}

var _RiskStateValues = []RiskState{Open, Closed, Accepted, Investigating}

var _RiskStateNameToValueMap = map[string]RiskState{
	_RiskStateName[0:4]:        Open,
	_RiskStateLowerName[0:4]:   Open,
	_RiskStateName[4:10]:       Closed,
	_RiskStateLowerName[4:10]:  Closed,
	_RiskStateName[10:18]:      Accepted,
	_RiskStateLowerName[10:18]: Accepted,
	_RiskStateName[18:31]:      Investigating,
	_RiskStateLowerName[18:31]: Investigating,
}

var _RiskStateNames = []string{
	_RiskStateName[0:4],
	_RiskStateName[4:10],
	_RiskStateName[10:18],
	_RiskStateName[18:31],
}

// RiskStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RiskStateString(s string) (RiskState, error) {
	if val, ok := _RiskStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RiskStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RiskState values", s)
}

// RiskStateValues returns all values of the enum
func RiskStateValues() []RiskState {
	return _RiskStateValues
}

// RiskStateStrings returns a slice of all String values of the enum
func RiskStateStrings() []string {
	strs := make([]string, len(_RiskStateNames))
	copy(strs, _RiskStateNames)
	return strs
}

// IsARiskState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RiskState) IsARiskState() bool {
	for _, v := range _RiskStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RiskState
func (i RiskState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RiskState
func (i *RiskState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RiskState should be a string, got %s", data)
	}

	var err error
	*i, err = RiskStateString(s)
	return err
}
